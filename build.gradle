plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.ajoberstar.reckon' version '0.16.1'
	id 'org.sonarqube' version '4.0.0.2929'
	id 'io.github.reyerizo.gradle.jcstress' version '0.8.15'
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }

	maven {
		url 'https://oss.sonatype.org/content/repositories/snapshots'
		content {
			includeGroup 'com.contentgrid.thunx'
		}
	}
}

reckon {
	scopeFromProp()
	snapshotFromProp()
}

bootRun {
	systemProperty("spring.profiles.active", "bootRun")
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

tasks.register("keycloakBootRun",  org.springframework.boot.gradle.tasks.run.BootRun.class) {
	description = "Runs the Spring Boot application with the Keycloak profile"
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = tasks.bootRun.classpath
	mainClass = tasks.bootRun.mainClass
	
	systemProperty("spring.profiles.active", "bootRun,keycloak")
}

tasks.register("consoleBootRun",  org.springframework.boot.gradle.tasks.run.BootRun.class) {
	description = "Runs the Spring Boot application with routing config for ContentGrid Console development"
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = tasks.bootRun.classpath
	mainClass = tasks.bootRun.mainClass

	systemProperty("spring.profiles.active", "bootRun,console")
}

tasks.register("runtimeBootRun",  org.springframework.boot.gradle.tasks.run.BootRun.class) {
	description = "Runs ContentGrid Gateway with config for ContentGrid Runtime Platform"
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = tasks.bootRun.classpath
	mainClass = tasks.bootRun.mainClass

	systemProperty("spring.profiles.active", "bootRun,runtime")
}

dependencies {
	implementation platform('org.springframework.cloud:spring-cloud-dependencies:2022.0.1')
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation platform('com.contentgrid.thunx:thunx-bom:0.6.1')
	implementation 'com.contentgrid.thunx:thunx-spring'
	implementation 'com.contentgrid.thunx:thunx-pdp-opa'

	implementation 'org.springframework.cloud:spring-cloud-kubernetes-fabric8-loadbalancer'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.rest-assured:rest-assured'
	testImplementation 'io.projectreactor:reactor-test'

	testImplementation platform('org.testcontainers:testcontainers-bom:1.17.6')
	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'com.github.dasniko:testcontainers-keycloak:2.5.0'

	testImplementation 'com.dajudge.kindcontainer:kindcontainer:1.4.1'
	testImplementation 'org.awaitility:awaitility'
}

test {
	useJUnitPlatform()
}

bootBuildImage {
	def dockerImageRepo = "docker.xenit.eu/open-source/contentgrid/gateway"
	imageName = "${dockerImageRepo}:${project.version}"
	tags = "${project.version}".endsWith('SNAPSHOT') ? [ "${dockerImageRepo}:SNAPSHOT" ] : null

	docker {
		publishRegistry {
			url = project.findProperty('DOCKER_PUBLISH_REGISTRY_URL')
			username = project.findProperty('DOCKER_PUBLISH_REGISTRY_USERNAME')
			password = project.findProperty('DOCKER_PUBLISH_REGISTRY_PASSWORD')
		}
	}
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "contentgrid-gateway"
		property "sonar.organization", "xenit-eu"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}