plugins {
	id 'java'
	id 'java-test-fixtures'
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.sonarqube' version '5.0.0.4638'
	id 'io.github.reyerizo.gradle.jcstress' version '0.8.15'
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

bootRun {
	systemProperty("spring.profiles.active", "bootRun")
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

tasks.register("keycloakBootRun",  org.springframework.boot.gradle.tasks.run.BootRun.class) {
	description = "Runs the Spring Boot application with the Keycloak profile"
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = tasks.bootRun.classpath
	mainClass = tasks.bootRun.mainClass
	
	systemProperty("spring.profiles.active", "bootRun,keycloak")
}

tasks.register("consoleBootRun",  org.springframework.boot.gradle.tasks.run.BootRun.class) {
	description = "Runs the Spring Boot application with routing config for ContentGrid Console development"
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = tasks.bootRun.classpath
	mainClass = tasks.bootRun.mainClass

	systemProperty("spring.profiles.active", "bootRun,console")
}

tasks.register("runtimeBootRun",  org.springframework.boot.gradle.tasks.run.BootRun.class) {
	description = "Runs ContentGrid Gateway with config for ContentGrid Runtime Platform"
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = tasks.bootRun.classpath
	mainClass = tasks.bootRun.mainClass

	systemProperty("spring.profiles.active", "bootRun,runtime")
	systemProperty("reactor.netty.http.server.accessLogEnabled", "true")
}

dependencies {
	implementation platform('org.springframework.cloud:spring-cloud-dependencies:2023.0.2')
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation platform('com.contentgrid.thunx:thunx-bom:0.11.0')
	implementation 'com.contentgrid.thunx:thunx-gateway-spring-boot-starter'
	implementation 'com.contentgrid.thunx:thunx-encoding-json'



	implementation 'org.springframework.cloud:spring-cloud-kubernetes-fabric8-loadbalancer'
	runtimeOnly 'org.bouncycastle:bcpkix-jdk18on:1.78.1'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock'

	testImplementation 'io.rest-assured:rest-assured'
	testImplementation 'io.projectreactor:reactor-test'

	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'com.github.dasniko:testcontainers-keycloak:3.2.0'

	testImplementation 'org.testcontainers:k3s'
	testImplementation 'org.awaitility:awaitility'

	testFixturesCompileOnly 'org.projectlombok:lombok'
	testFixturesAnnotationProcessor 'org.projectlombok:lombok'

	testFixturesApi 'com.nimbusds:nimbus-jose-jwt:9.24.4'
	testFixturesApi 'org.assertj:assertj-core'
	testFixturesApi 'org.bouncycastle:bcprov-jdk18on:1.78.1'
	testFixturesApi 'org.springframework:spring-webflux'
	testFixturesApi 'org.springframework.security:spring-security-crypto'
	testFixturesApi 'org.springframework.cloud:spring-cloud-commons'

	testFixturesImplementation platform('org.springframework.cloud:spring-cloud-dependencies:2022.0.5')
	testFixturesImplementation 'io.projectreactor:reactor-test'
	testFixturesImplementation 'com.fasterxml.jackson.core:jackson-databind'
	testFixturesImplementation 'org.springframework.security:spring-security-core'
}

test {
	useJUnitPlatform()
}

bootBuildImage {
	def dockerImageRepo = "ghcr.io/xenit-eu/contentgrid-gateway"
	imageName = "${dockerImageRepo}:${project.version}"
	tags = "${project.version}".endsWith('SNAPSHOT') ? [ "${dockerImageRepo}:SNAPSHOT" ] : null

	docker {
		publishRegistry {
			url = project.findProperty('DOCKER_PUBLISH_REGISTRY_URL')
			username = project.findProperty('DOCKER_PUBLISH_REGISTRY_USERNAME')
			password = project.findProperty('DOCKER_PUBLISH_REGISTRY_PASSWORD')
		}
	}
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "contentgrid-gateway"
		property "sonar.organization", "xenit-eu"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}
