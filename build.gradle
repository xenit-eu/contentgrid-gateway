plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'eu.xenit.docker' version '5.3.2'
	id "eu.xenit.docker-compose" version '5.3.2'
	id 'org.ajoberstar.reckon' version '0.16.1'
}

sourceCompatibility = '11'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }

	maven {
		url 'https://oss.sonatype.org/content/repositories/snapshots'
		content {
			includeGroup 'eu.xenit.contentcloud'
			includeGroup 'eu.xenit.contentcloud.thunx'
		}
	}
}

reckon {
	scopeFromProp()
	snapshotFromProp()
}

ext {
	springCloudVersion = '2021.0.3'
	thunxVersion = '0.3.3'
}

bootRun {
	systemProperty("spring.profiles.active", "bootRun")
}

tasks.register("keycloakBootRun",  org.springframework.boot.gradle.tasks.run.BootRun.class) {
	description = "Runs the Spring Boot application with the Keycloak profile"
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = tasks.bootRun.classpath
	mainClass = tasks.bootRun.mainClass
	
	systemProperty("spring.profiles.active", "bootRun,keycloak")
}

tasks.register("consoleBootRun",  org.springframework.boot.gradle.tasks.run.BootRun.class) {
	description = "Runs the Spring Boot application with routing config for Content Cloud Console development"
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = tasks.bootRun.classpath
	mainClass = tasks.bootRun.mainClass

	systemProperty("spring.profiles.active", "bootRun,console")
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation "eu.xenit.contentcloud.thunx:thunx-spring:${thunxVersion}"
	implementation "eu.xenit.contentcloud.thunx:thunx-pdp-opa:${thunxVersion}"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.jayway.restassured:rest-assured:2.9.0'
	testImplementation platform('org.testcontainers:testcontainers-bom:1.17.3')
	testImplementation "org.testcontainers:testcontainers"
	testImplementation "org.testcontainers:junit-jupiter"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

task writeDockerImageCoords {
	doLast {
		def image = buildDockerImage.getImages().get().find()
		assert image: "Docker Image has no tags ?!"
		println "Using image: ${image}"
		file("build/docker.image").newWriter().withWriter {
			it.write image
		}
	}
}

pushDockerImage {
	dependsOn(writeDockerImageCoords)
	registryCredentials {
		url = System.getenv('XENIT_DOCKER_REGISTRY_URL')
		username = System.getenv('XENIT_DOCKER_REGISTRY_USERNAME')
		password = System.getenv('XENIT_DOCKER_REGISTRY_PASSWORD')
	}
}

createDockerFile {
	from 'docker.io/xenit/openjdk:jdk-11-bionic'
	smartCopy(bootJar.getArchiveFile().map({it.asFile}), "/app.jar")
	defaultCommand("java", '$JAVA_OPTS',"-jar","/app.jar")
	instruction 'HEALTHCHECK --interval=10s --timeout=2s CMD curl --fail --silent --max-time 1 http://localhost:8081/actuator/health'
}

dockerBuild {
	repositories = ["hub.xenit.eu/content-cloud/gateway"]
	tags = imageTags(version)
}

dockerCompose {
	dockerComposeWorkingDirectory = 'docker-compose/'
	keycloak {
		useComposeFiles = dockerCompose.useComposeFiles + ['docker-compose-keycloak.yml']
	}
}

static Set<String> imageTags(ver) {
	String _version = ver.toString();
	Set<String> tags = [_version];
	if (_version.endsWith("-SNAPSHOT")) {
		tags.add("SNAPSHOT")
	} else {
		tags.add("latest");
	}
	if (System.getenv("CI") != "true") {
		tags.add("local");
	}
	return tags;
}
